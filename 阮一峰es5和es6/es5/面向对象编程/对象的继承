# 原型对象概述

## 构造函数的缺点

通过构造函数为实例对象定义属性，虽然很方便，但是有一个缺点。**同一个构造函数的多个实例之间，无法共享属性，从而造成对系统资源的浪费。**

```js
function Cat(name, color) {
  this.name = name;
  this.color = color;
  this.meow = function () {
    console.log('喵喵');
  };
}

var cat1 = new Cat('大毛', '白色');
var cat2 = new Cat('二毛', '黑色');

cat1.meow === cat2.meow
// false
```

**这个问题的解决方法，就是 JavaScript 的原型对象（prototype）。**

## prototype 属性的作用

JavaScript 规定，每个函数都有一个`prototype`属性，指向一个对象。

```js
function f() {}
typeof f.prototype // "object"
```

**原型对象的作用，就是定义所有实例对象共享的属性和方法。这也是它被称为原型对象的原因，而实例对象可以视作从原型对象衍生出来的子对象。**

## 原型链

**JavaScript 规定，所有对象都有自己的原型对象（prototype）**。一方面，任何一个对象，都可以充当其他对象的原型；另一方面，由于原型对象也是对象，所以它也有自己的原型。

如果一层层地上溯，所有对象的原型最终都可以上溯到`Object.prototype`，即`Object`构造函数的`prototype`属性。也就是说，所有对象都继承了`Object.prototype`的属性。**这就是所有对象都有`valueOf`和`toString`方法的原因，因为这是从`Object.prototype`继承的。**

**原型链的尽头就是`null`。**

## constructor 属性

`prototype`对象有一个`constructor`属性，默认指向`prototype`对象所在的构造函数。

```js
function P() {}
P.prototype.constructor === P // true
```

`constructor`属性的作用是，可以得知某个实例对象，到底是哪一个构造函数产生的。

```js
function F() {};
var f = new F();

f.constructor === F // true
f.constructor === RegExp // false
```

另一方面，有了`constructor`属性，就可以从一个实例对象新建另一个实例。

```js
function Constr() {}
var x = new Constr();

var y = new x.constructor(); 
//相当于 var y = new Constr.prototype.construtor()
//优化 var y = new Constr()


//这就通过实例的构造器方法获取构造函数，从而继承同一原型



x instanceof Constr // true
y instanceof Constr // true
x.__proto__ === y.__proto__ //true

```

```js
Constr.prototype.createCopy = function () {
  return new this.constructor();
    // return new Constr()
};


```

在原型上定义一个方法`createCopy`，这个方法返回一个实例对象。

***

`constructor`属性表示原型对象与构造函数之间的关联关系，如果修改了原型对象，一般会同时修改`constructor`属性，防止引用的时候出错。

```js
function Person(name) {
  this.name = name;
}

Person.prototype.constructor === Person // true

Person.prototype = {
  method: function () {}
};

Person.prototype.constructor === Person // false
Person.prototype.constructor === Object // true
```

## instanceof 运算符

`instanceof`运算符返回一个布尔值，表示对象是否为某个构造函数的实例



## 模块

### 基本实现方法

模块是实现特定功能的一组属性和方法的封装。

```js
var module1 = new Object({
　_count : 0,
　m1 : function (){
　　//...
　},
　m2 : function (){
  　//...
　}
});

//就是把方法和属性存储在一个实例里面
```

### 封装私有变量：构造函数的写法

